# LumenCanvas — Minimal-First Web Projection-Mapping Toolkit
*(Complete, stand-alone PRD — IndexedDB-first, no accounts, local-or-Netlify deploy)*  
_Last updated · 21 Jun 2025_

---

## 0 · Why Another Tool?  
Most projection-mapping suites are heavyweight, pricey, and desktop-bound. **LumenCanvas** pares the craft down to three verbs:

> **warp · drop · glow**

…and still lets power-users inject live HTML or GLSL when they need to.

---

## 1 · Product Pillars

| Pillar | Meaning | Design Result |
|--------|---------|---------------|
| **Minimal Surface, Max Control** | Dark-booth UI must be friction-free. | Single-screen editor, progressive disclosure, keyboard-first. |
| **Code-When-You-Need-It** | Creators demand HTML / GLSL freedom. | Pop-up Monaco editor on any layer; hot-reload; saved in project. |
| **Always-Live Split** | Show must remain safe while you tweak. | Separate "Projection View" that live-syncs from editor (pop-out or `/projector/<id>`). |
| **Zero-Install** | Venues / classrooms / Pi kiosks. | Pure Web tech; PWA offline; runs from `file://`, `localhost`, or Netlify. |
| **Warp-Once, Reuse Forever** | Re-hang shows in minutes. | Named surface templates + per-scene media bindings. |

_No user accounts, no auth. Everything stays local in **IndexedDB** unless you export a ZIP._

---

## 2 · Goals & Success Metrics (6 months)

| Goal | KPI |
|------|-----|
| From first load → light on the wall | **≤ 3 min** median |
| Crash-free sessions | **≥ 95 %** |
| GitHub stars | **1 000** |
| Monthly active users | **2 000** |
| Scenes using Shader/HTML layers | **≥ 30 %** |

---

## 3 · Competitive Snapshot

| Feature | MadMapper | Resolume | Lightform | **LumenCanvas** |
|---------|-----------|----------|-----------|-----------------|
| Browser-based | ✗ | ✗ | Desktop | **✓** |
| Quad & mesh warp | ✓ | ✓ | ✓ | **✓** |
| Auto masking (CV) | ✗ | ✗ | ✓ | **✓ (Web)** |
| Built-in GLSL shaders | add-on | ✓ | ✗ | **✓** |
| HTML/URL layers | ✗ | ⚠︎ | ✗ | **✓** |
| Price | $399+ | $999+ | $1 200 | **Free / OSS** |

---

## 4 · MVP User Stories

1. **Drag-Pin** — warp any quad with four handles.  
2. **Quick-Drop Media** — drag an MP4/PNG → plays instantly.  
3. **Code-Edit** — press **E** → Monaco overlay → paste GLSL/HTML → live preview.  
4. **Auto-Mask** — click *Mask via Cam* → webcam isolates surface.  
5. **Dual-View** — open Projection View (pop-out or `/projector/<id>`) on projector while editing on laptop; updates stream live.

---

## 5 · Functional Spec

| Area | Requirement | Implementation |
|------|-------------|----------------|
| **Warping** | Quad + optional 4 × 4 mesh | Mesh stored as UV deltas (tiny JSON). |
| **Content Types** | Image · Video · Remote URL · HTML snippet · GLSL shader | Shader via **glsl-canvas**; HTML in sandboxed iframe. |
| **Masking** | Lite U-Net 512² (≈1.2 MB) + manual polygon | **ONNX Runtime Web** → wasm fallback. |
| **Layer Ops** | Order · opacity · blend (add, screen, multiply) · mute | Hotkeys & context menu. |
| **Scenes** | Unlimited; projector cross-fades 500 ms | Hotkey `1-9`. |
| **Save/Load** | Auto-save to **IndexedDB**; export/import `.lumencanvas.zip` | Inline blobs ≤ 5 MB; larger assets remain file-URLs. |
| **Plugins** | `registerPlugin({onLoad, render})` | Gets Pixi container + Zustand store handle. |
| **Projection View** | Two options:<br>• **Pop-out** second window via `window.open()` (drag to projector)<br>• Same-origin route `/projector/<id>` | Live sync via **BroadcastChannel** (pop-out) or **Yjs** diff patches (route). No auth token. |

---

## 6 · UI Anatomy

### 6.1 Editor  

```
┌ TopBar ──────────────────────────────────────────────────────────┐
│ LumenCanvas  Scene▾  +Layer  Mask(M)  Shader(F2)  Preview(P)    │
└──────────────────────────────────────────────────────────────────┘
┌ Sidebar (⌘1/2/3) ──┐┌───────────────────────────────────────────┐
│ Layers             ││ Pixi Canvas — warp handles, zoom, pan     │
│ Scenes             ││                                           │
│ Assets             ││                                           │
└────────────────────┘└───────────────────────────────────────────┘
• Properties pop-over floats right on selection.  
• Monaco modal (⌘E) overlays full height with blurred backdrop.
```

### 6.2 Projection View  

*Black, chrome-less window/full-screen canvas.*  
Opens via:

```ts
const w = window.open('/projector/' + projectId, 'LCProjector');
```

—or—  

```ts
const w = window.open('', 'LCpopup', 'menubar=no,toolbar=no');
injectCanvas(w);
```

---

## 7 · Architecture

### 7.1 Directory Graph (React 18)

```
/src
 ├─ app/Router
 ├─ layouts/       # EditorLayout, ProjectorLayout
 ├─ components/    # Sidebar, TopBar, Popovers
 ├─ canvas/        # Pixi wrappers, warp handles
 ├─ state/         # zustand + Yjs bindings
 ├─ hooks/         # useProjectorSync, useMask
 └─ plugins/
```

### 7.2 Data & Sync

```mermaid
graph TD
  Z[Zustand store] --> Y[Yjs doc (IndexedDB provider)]
  Y -->|BroadcastChannel| P[Pop-out window]
  Y -->|WebSocket*| R[/projector route]
  R --> PixiPJ
```

\* A 15-line Yjs WebSocket server (runs locally or in a Netlify Function) enables multi-device projection, but nothing is authenticated.

* **Local-only, single-device:** BroadcastChannel is enough.
* **Local network / Netlify:** same lightweight Yjs WebSocket; anonymous rooms by `projectId`.

### 7.3 Tech Stack

| Layer  | Choice                                                   | Reason                           |
| ------ | -------------------------------------------------------- | -------------------------------- |
| Build  | **Vite**                                                 | Fast HMR, React template         |
| UI     | **shadcn/ui**                                            | Accessible, unopinionated        |
| State  | **Zustand + Immer**                                      | Minimal, Cursor-friendly         |
| CRDT   | **Yjs**                                                  | Conflict-free, offline           |
| Sync   | **BroadcastChannel** + optional **y-websocket**          | No auth, works offline & Netlify |
| Canvas | **pixi.js 8** (`@pixi/react`)                            | WebGL2, shader hooks             |
| Code   | **Monaco**                                               | VS Code quality editing          |
| CV     | **ONNX Runtime Web**                                     | GPU → wasm fallback              |
| Deploy | Plain static build (`dist/`) + optional Netlify Function | No config                        |

### 7.4 Performance Guardrails

| Guardrail           | Action                              |
| ------------------- | ----------------------------------- |
| Stage > 4096 × 4096 | Display "Surface too large" warning |
| Shader typing       | Recompile debounce 200 ms           |
| Layer frame budget  | Flag layers > 2 ms                  |

---

## 8 · Layout Tokens

| CSS var           | Default |
| ----------------- | ------- |
| `--sidebar-width` | 280 px  |
| `--topbar-height` | 44 px   |
| `--canvas-bg`     | #111    |
| `--accent`        | #12B0FF |

---

## 9 · Keyboard Map

| Key        | Action                          |
| ---------- | ------------------------------- |
| **P**      | Pop-out / focus Projection View |
| **M**      | Toggle mask mode                |
| **F2**     | New shader layer                |
| **E**      | Edit code                       |
| **⌘D**     | Duplicate layer                 |
| **⌘ /**    | Toggle handles                  |
| **Arrows** | Nudge 1 px (Shift = 10 px)      |

---

## 10 · Roadmap

| Milestone          | Highlights                                                    |
| ------------------ | ------------------------------------------------------------- |
| **Beta — Q3 2025** | Multi-surface, MIDI/OSC map, Netlify one-click template       |
| **1.0 — Q4 2025**  | Timeline & tween keyframes, edge-blend, community marketplace |
| **1.1 — Q1 2026**  | Mobile companion (React Native), Electron/TAURI packager      |
| **LTS — Q2 2026**  | Depth-camera calibration, enterprise sync options             |

---

## 11 · Risks & Mitigations

| Risk              | Mitigation                                               |
| ----------------- | -------------------------------------------------------- |
| Low-end GPU       | WebGL "Performance Low" mode                             |
| Unstable Wi-Fi    | P2P BroadcastChannel on same machine; offline PWA caches |
| Large video files | Progressive download; suggest H.264 720p by default      |
| CV mis-mask       | Manual polygon refine; freeze-frame sampling mode        |

---

## 12 · Next Engineering Steps

1. **Repo bootstrap**

```bash
npm create vite@latest lumencanvas -- --template react
cd lumencanvas
npm i pixi.js @pixi/react zustand yjs y-websocket broadcast-channel @monaco-editor/react onnxruntime-web shadcn-ui vite-plugin-pwa
```

2. **Routes** — `/edit` & `/projector/:id`
3. **Warpable Quad** — Pixi `Sprite` + draggable handles
4. **Zustand ↔ Yjs bridge** — store schema `{surfaces, scenes, assets}`
5. **Pop-out helper** — `openProjector()` with BroadcastChannel sync
6. **Service-worker (vite-plugin-pwa)** — cache UI shell + ONNX model

---

## 13 · Local vs Netlify Cheat-Sheet

| Task            | Local Dev                                    | Netlify                               |
| --------------- | -------------------------------------------- | ------------------------------------- |
| Start editor    | `npm run dev` → `http://localhost:5173/edit` | `https://<site>.netlify.app/edit`     |
| Projection view | Pop-out window **or** `/projector/<id>`      | Same domain; anonymous WebSocket room |
| WebSocket URL   | `ws://localhost:5173/socket` (dev proxy)     | `/.netlify/functions/socket`          |
| Offline PWA     | `npm run build` → open `dist/index.html`     | Netlify serves PWA; SW pre-cached     |

---

### **LumenCanvas is now fully specced, solely client-side, IndexedDB-powered, and Netlify-ready.**

*No auth, no accounts — just open the page, warp, drop, and glow.* 